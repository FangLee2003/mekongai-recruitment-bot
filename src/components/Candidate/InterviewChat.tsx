import { useEffect, useRef, useState } from "react";
import { sendInterviewAnswer, fetchInterviewHistory } from "../../services/interview";

// Props truy·ªÅn v√†o component: cvId v√† h√†m g·ªçi khi k·∫øt th√∫c ph·ªèng v·∫•n
interface Props {
  cvId: string;
  onFinish: () => void;
}

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu c·ªßa t·ª´ng tin nh·∫Øn
type Message = {
  type: "question" | "answer" | "done";
  text: string;
};

export default function InterviewChat({ cvId, onFinish }: Props) {
  // State qu·∫£n l√Ω to√†n b·ªô tin nh·∫Øn h·ªèi/ƒë√°p trong phi√™n ph·ªèng v·∫•n
  const [messages, setMessages] = useState<Message[]>([]);

  // State qu·∫£n l√Ω n·ªôi dung input c·ªßa ng∆∞·ªùi d√πng
  const [input, setInput] = useState("");

  // State ki·ªÉm so√°t loading khi ƒëang g·ª≠i c√¢u tr·∫£ l·ªùi
  const [loading, setLoading] = useState(false);

  // Tr·∫°ng th√°i ƒë√£ ho√†n th√†nh bu·ªïi ph·ªèng v·∫•n hay ch∆∞a
  const [isDone, setIsDone] = useState<boolean>(false);

  // Tham chi·∫øu ƒë·∫øn v√πng hi·ªÉn th·ªã chat ƒë·ªÉ auto scroll
  const chatRef = useRef<HTMLDivElement>(null);

  // Khi component mount: ki·ªÉm tra xem bu·ªïi ph·ªèng v·∫•n ƒë√£ ho√†n th√†nh ch∆∞a
  useEffect(() => {
    const finished = localStorage.getItem(`interview_done_${cvId}`) === "true";

    if (finished) {
      // N·∫øu ƒë√£ ho√†n th√†nh ‚Üí l·∫•y l·∫°i l·ªãch s·ª≠ ƒë·ªÉ hi·ªÉn th·ªã
      setIsDone(true);
      fetchInterviewHistory(cvId).then((history) => {
        const historyMessages: Message[] = history.map((m: any) => ({
          type: m.type,
          text: m.text,
        }));
        setMessages([
          ...historyMessages,
          {
            type: "done",
            text: "‚úÖ Bu·ªïi ph·ªèng v·∫•n h√¥m nay xin ƒë∆∞·ª£c k·∫øt th√∫c t·∫°i ƒë√¢y.",
          },
        ]);
      });
    } else {
      // N·∫øu ch∆∞a ho√†n th√†nh ‚Üí load c√¢u h·ªèi ƒë·∫ßu ti√™n t·ª´ localStorage
      const stored = localStorage.getItem("question_set");
      if (stored) {
        const questions: string[] = JSON.parse(stored);
        if (questions.length > 0) {
          setMessages([{ type: "question", text: questions[0] }]);
        }
      }
    }
  }, [cvId]);

  // T·ª± ƒë·ªông cu·ªôn xu·ªëng khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (chatRef.current) {
      chatRef.current.scrollTop = chatRef.current.scrollHeight;
    }
  }, [messages]);

  // X·ª≠ l√Ω g·ª≠i c√¢u tr·∫£ l·ªùi t·ª´ ng∆∞·ªùi d√πng
  const handleSubmit = async () => {
    if (!input.trim() || isDone) return;

    const userAnswer = input.trim();

    // C·∫≠p nh·∫≠t giao di·ªán: th√™m c√¢u tr·∫£ l·ªùi ng∆∞·ªùi d√πng
    const updatedMessages = [...messages, { type: "answer", text: userAnswer }];
    setMessages(updatedMessages);
    setInput("");
    setLoading(true);

    try {
      // G·ªçi API ƒë·ªÉ l·∫•y ph·∫£n h·ªìi t·ª´ AI (stream)
      const reply = await sendInterviewAnswer(cvId, userAnswer);

      // Ki·ªÉm tra n·∫øu n·ªôi dung tr·∫£ v·ªÅ ch·ª©a d·∫•u hi·ªáu k·∫øt th√∫c
      if (reply.toLowerCase().includes("k·∫øt th√∫c t·∫°i ƒë√¢y")) {
        const doneMessage = { type: "done", text: reply };

        // C·∫≠p nh·∫≠t messages & set tr·∫°ng th√°i ƒë√£ k·∫øt th√∫c
        setMessages([...updatedMessages, doneMessage]);
        setIsDone(true);

        // Ghi tr·∫°ng th√°i ho√†n th√†nh v√†o localStorage (ƒë·ªÉ l·∫ßn sau load l·∫°i bi·∫øt)
        localStorage.setItem(`interview_done_${cvId}`, "true");

        // Xo√° c√°c tr·∫°ng th√°i t·∫°m th·ªùi kh√¥ng c√≤n d√πng n·ªØa
        localStorage.removeItem("question_set_ready");
        localStorage.removeItem("question_set");

        // G·ªçi h√†m callback th√¥ng b√°o k·∫øt th√∫c
        onFinish();
      } else {
        // N·∫øu ch∆∞a k·∫øt th√∫c ‚Üí hi·ªÉn th·ªã ti·∫øp c√¢u h·ªèi m·ªõi t·ª´ AI
        setMessages([...updatedMessages, { type: "question", text: reply }]);
      }
    } catch (err) {
      console.error("L·ªói khi g·ª≠i c√¢u tr·∫£ l·ªùi:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white p-4 rounded shadow mb-4">
      <h3 className="font-semibold mb-2">üí¨ B√†i test ph·ªèng v·∫•n</h3>

      {/* V√πng hi·ªÉn th·ªã to√†n b·ªô n·ªôi dung chat */}
      <div
        ref={chatRef}
        className="h-64 overflow-y-auto border p-3 mb-2 rounded space-y-2 bg-gray-50"
      >
        {messages.map((msg, idx) => (
          <div
            key={idx}
            className={`max-w-xs px-3 py-2 rounded-lg text-sm ${
              msg.type === "question"
                ? "bg-gray-300 text-left self-start"
                : msg.type === "answer"
                ? "bg-blue-500 text-white text-right self-end ml-auto"
                : "text-center text-green-600 font-semibold"
            }`}
          >
            {msg.text}
          </div>
        ))}
      </div>

      {/* N·∫øu ƒë√£ xong th√¨ kh√¥ng hi·ªÉn th·ªã √¥ nh·∫≠p n·ªØa */}
      {isDone ? (
        <p className="text-green-700 font-medium text-sm text-center">
          ‚úÖ Bu·ªïi ph·ªèng v·∫•n h√¥m nay ƒë√£ k·∫øt th√∫c!
        </p>
      ) : (
        <div className="flex items-center gap-2">
          <input
            className="flex-1 border rounded px-2 py-1"
            placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === "Enter" && handleSubmit()}
            disabled={loading}
          />
          <button
            onClick={handleSubmit}
            className="bg-blue-600 text-white px-3 py-1 rounded disabled:opacity-50"
            disabled={loading || !input.trim()}
          >
            G·ª≠i
          </button>
        </div>
      )}
    </div>
  );
}
